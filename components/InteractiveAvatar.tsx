import {
  AvatarQuality,
  StreamingEvents,
  VoiceChatTransport,
  VoiceEmotion,
  StartAvatarRequest,
  STTProvider,
  ElevenLabsModel,
} from "@heygen/streaming-avatar";
import { useEffect, useRef, useState } from "react";
import { useMemoizedFn, useUnmount } from "ahooks";

import { Button } from "./Button";
import { AvatarConfig } from "./AvatarConfig";
import { AvatarVideo } from "./AvatarSession/AvatarVideo";
import { useStreamingAvatarSession } from "./logic/useStreamingAvatarSession";
import { AvatarControls } from "./AvatarSession/AvatarControls";
import { useVoiceChat } from "./logic/useVoiceChat";
import { StreamingAvatarProvider, StreamingAvatarSessionState } from "./logic";
import { LoadingIcon } from "./Icons";
import { MessageHistory } from "./AvatarSession/MessageHistory";
import { AVATARS } from "@/app/lib/constants";

const DEFAULT_CONFIG: StartAvatarRequest = {
  quality: AvatarQuality.Medium,
  avatarName: AVATARS[0].avatar_id,
  knowledgeId: undefined,
  voice: {
    rate: 1.5,
    emotion: VoiceEmotion.EXCITED,
    model: ElevenLabsModel.eleven_flash_v2_5,
  },
  language: "en",
  activityIdleTimeout: 3600, // 1 —á–∞—Å –º–∞–∫—Å–∏–º—É–º
  voiceChatTransport: VoiceChatTransport.WEBSOCKET,
  sttSettings: { 
    provider: STTProvider.DEEPGRAM,
    confidence: 0.55 
  },
};

function InteractiveAvatar() {
  const { initAvatar, startAvatar, stopAvatar, sessionState, stream } =
    useStreamingAvatarSession();
  const { startVoiceChat } = useVoiceChat();

  const [config, setConfig] = useState<StartAvatarRequest>(DEFAULT_CONFIG);
  const configRef = useRef(config);
  useEffect(() => {
    configRef.current = config;
  }, [config]);

  const isVoiceChatRef = useRef(false);
  const videoRef = useRef<HTMLVideoElement>(null);
  const keepAliveIntervalRef = useRef<NodeJS.Timeout | null>(null);
  const watchdogIntervalRef = useRef<NodeJS.Timeout | null>(null);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
  const fetchAccessToken = async () => {
    try {
      const res = await fetch("/api/get-access-token", { method: "POST" });
      if (!res.ok) throw new Error(`Token fetch failed: ${res.status}`);
      return res.text();
    } catch (error) {
      console.error("Error fetching access token:", error);
      throw error;
    }
  };

  // –ú—è–≥–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–µ–¥–∏–∞-–ø–æ—Ç–æ–∫–æ–≤
  const softRestartTracks = useMemoizedFn(async () => {
    if (sessionState !== StreamingAvatarSessionState.CONNECTED) return;
    
    console.log("üîÑ Attempting soft restart of media tracks...");
    try {
      await startVoiceChat();
      console.log("‚úÖ Soft restart tracks completed successfully");
    } catch (e: any) {
      const msg = e?.message || "";
      // HeyGen –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 400 –µ—Å–ª–∏ —É–∂–µ —Å–ª—É—à–∞–µ—Ç, 401 –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª
      if (msg.includes("400") || msg.includes("already")) {
        console.warn("‚ö†Ô∏è Soft restart: already listening (benign error)");
      } else if (msg.includes("401")) {
        console.warn("‚ö†Ô∏è Token expired, need full restart");
        throw e; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è hard reset
      } else {
        console.error("‚ùå Soft restart failed:", e);
        throw e;
      }
    }
  });

  // –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏
  const hardReset = useMemoizedFn(async () => {
    console.warn("üî¥ Initiating HARD RESET of avatar session...");
    
    try {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
      await stopAvatar();
      
      // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
      if (keepAliveIntervalRef.current) {
        clearInterval(keepAliveIntervalRef.current);
        keepAliveIntervalRef.current = null;
      }
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
      await new Promise(r => setTimeout(r, 1000));
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
      const token = await fetchAccessToken();
      const avatar = initAvatar(token);
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
      avatar.on(StreamingEvents.STREAM_DISCONNECTED, () => {
        console.warn("üì° Stream disconnected, attempting recovery...");
        softRestartTracks();
      });
      
      avatar.on(StreamingEvents.STREAM_READY, () => {
        console.log("‚úÖ Stream ready after hard reset");
      });
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤–∞—Ç–∞—Ä —Å –∫–æ–Ω—Ñ–∏–≥–æ–º
      await startAvatar(configRef.current);
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º voice chat –µ—Å–ª–∏ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω
      if (isVoiceChatRef.current) {
        await startVoiceChat();
      }
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º keepAlive
      setupKeepAlive(avatar);
      
      console.log("‚úÖ Hard reset completed successfully");
    } catch (error) {
      console.error("‚ùå Hard reset failed:", error);
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å UI —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    }
  });

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ keepAlive –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
  const setupKeepAlive = (avatar: any) => {
    if (keepAliveIntervalRef.current) {
      clearInterval(keepAliveIntervalRef.current);
    }
    
    keepAliveIntervalRef.current = setInterval(() => {
      if (avatar && avatar.keepAlive) {
        avatar.keepAlive();
        console.log("üíì Keep-alive signal sent");
      }
    }, 300000); // –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  };

  // –ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏
  const startSession = useMemoizedFn(async (needVoice: boolean) => {
    try {
      console.log("üöÄ Starting avatar session...");
      
      const token = await fetchAccessToken();
      const avatar = initAvatar(token);
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
      avatar.on(StreamingEvents.STREAM_DISCONNECTED, () => {
        console.warn("üì° Stream disconnected, attempting recovery...");
        softRestartTracks();
      });
      
      avatar.on(StreamingEvents.AVATAR_START_TALKING, (e) => {
        console.log("üó£Ô∏è Avatar started talking", e);
      });
      
      avatar.on(StreamingEvents.AVATAR_STOP_TALKING, (e) => {
        console.log("ü§ê Avatar stopped talking", e);
      });
      
      avatar.on(StreamingEvents.STREAM_READY, (event) => {
        console.log("‚úÖ Stream ready:", event.detail);
      });

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤–∞—Ç–∞—Ä
      await startAvatar(configRef.current);
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º keepAlive
      setupKeepAlive(avatar);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º voice chat –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (needVoice) {
        await startVoiceChat();
        isVoiceChatRef.current = true;
      }
      
      console.log("‚úÖ Session started successfully");
    } catch (error) {
      console.error("‚ùå Session start error:", error);
    }
  });

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useUnmount(() => {
    console.log("üîö Component unmounting, cleaning up...");
    
    if (keepAliveIntervalRef.current) {
      clearInterval(keepAliveIntervalRef.current);
    }
    
    if (watchdogIntervalRef.current) {
      clearInterval(watchdogIntervalRef.current);
    }
    
    stopAvatar();
  });

  // –ü—Ä–∏–≤—è–∑–∫–∞ –≤–∏–¥–µ–æ
  useEffect(() => {
    if (stream && videoRef.current) {
      videoRef.current.srcObject = stream;
      videoRef.current.onloadedmetadata = () => {
        videoRef.current?.play();
      };
    }
  }, [stream]);

  // Watchdog –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏–π
  useEffect(() => {
    let previousTime = 0;
    let freezeCount = 0;
    const SOFT_LIMIT = 3; // –ü–æ—Å–ª–µ 3 –º—è–≥–∫–∏—Ö –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ –¥–µ–ª–∞–µ–º hard reset
    
    watchdogIntervalRef.current = setInterval(async () => {
      const video = videoRef.current;
      if (!video || sessionState !== StreamingAvatarSessionState.CONNECTED) return;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–≤–∏–∂–µ—Ç—Å—è –ª–∏ –≤–∏–¥–µ–æ
      if (video.currentTime === previousTime) {
        console.warn(`‚ö†Ô∏è Video freeze detected (attempt ${freezeCount + 1}/${SOFT_LIMIT})`);
        
        try {
          await softRestartTracks();
          freezeCount++;
          
          if (freezeCount >= SOFT_LIMIT) {
            console.warn("‚ö†Ô∏è Soft restart limit reached, initiating hard reset...");
            freezeCount = 0;
            await hardReset();
          }
        } catch (error) {
          console.error("Error in watchdog recovery:", error);
          // –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ –¥–µ–ª–∞–µ–º hard reset
          await hardReset();
          freezeCount = 0;
        }
      } else {
        // –í–∏–¥–µ–æ –¥–≤–∏–∂–µ—Ç—Å—è - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        if (freezeCount > 0) {
          console.log("‚úÖ Video recovered, resetting freeze counter");
          freezeCount = 0;
        }
      }
      
      previousTime = video.currentTime;
    }, 10000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    
    return () => {
      if (watchdogIntervalRef.current) {
        clearInterval(watchdogIntervalRef.current);
      }
    };
  }, [softRestartTracks, hardReset, sessionState]);

  // UI
  return (
    <div className="w-full flex flex-col gap-4">
      <div className="flex flex-col rounded-xl bg-zinc-900 overflow-hidden">
        <div className="relative w-full aspect-video flex items-center justify-center">
          {sessionState !== StreamingAvatarSessionState.INACTIVE ? (
            <AvatarVideo ref={videoRef} />
          ) : (
            <AvatarConfig config={config} onConfigChange={setConfig} />
          )}
        </div>
        <div className="flex flex-col items-center gap-3 p-4 border-t border-zinc-700">
          {sessionState === StreamingAvatarSessionState.CONNECTED ? (
            <AvatarControls />
          ) : sessionState === StreamingAvatarSessionState.INACTIVE ? (
            <div className="flex gap-4">
              <Button onClick={() => startSession(true)}>Start Voice Chat</Button>
              <Button onClick={() => startSession(false)}>Start Text Chat</Button>
            </div>
          ) : (
            <LoadingIcon />
          )}
        </div>
      </div>
      {sessionState === StreamingAvatarSessionState.CONNECTED && <MessageHistory />}
    </div>
  );
}

export default function InteractiveAvatarWrapper() {
  return (
    <StreamingAvatarProvider basePath={process.env.NEXT_PUBLIC_BASE_API_URL}>
      <InteractiveAvatar />
    </StreamingAvatarProvider>
  );
}
